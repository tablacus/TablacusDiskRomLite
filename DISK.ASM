
;	Tablacus DISK ROM - DISK

;	ROM DISK DRIVER
;	1セクタ512

ERROR_WRITE_PROTECTED:
	LD	A,0		;Write protected
	RET
ERROR_NOT_READY:
	POP	AF
	SCF
	LD	A,2		;Not ready
	RET
DISKIO:
	JR	C,ERROR_WRITE_PROTECTED
	LD	C,B
	CALL	GET_DISK_BANK
	PUSH	AF
	LD	A,(SECSZ_H)
	OR	A
	JR	Z,ERROR_NOT_READY
	POP	AF
SETMAP1:
	PUSH	HL
DISKIO1:
	PUSH	BC		;B=残りのセクタ数
	PUSH	DE		;DE=セクタ番号
	PUSH	AF		;A=8KB単位でカートリッジ内のディスクが存在する位置を指定

	EX	DE,HL		;DE=受け取る読み出し先のメモリアドレス HL=セクタ番号
	PUSH	AF
	LD	A,(SECSZ_H)
	CALL	MUL_AHL
	POP	AF
#if exists USE_NORMAL32K_OR_ASCII16
	LD	A,L
	PUSH	BC
	LD	BC,-00020H	;先頭の8KB部分
	ADD	HL,BC
	POP	BC
	JR	NC,DISKIO2
	LD	C,L		;C=読み出し元
	ADD	HL,HL	;64KB→32KB
	ADD	HL,HL	;32KB→16KB	バンク切り替えのサイズに合わせる
	CALL	GET_DISK_BANK_FDRV
	ADD	A,H
	LD	(ASCII16_BANK1_SEL),A	;ASCII-16K
	LD	(_BANK),A
	LD	L,C		;C=読み出し元
	LD	A,03FH		;セグメントのサイズでフィルタする(16K:3F)
	AND	L
	ADD	A,020H
#else
	LD	C,L		;C=読み出し元
	ADD	HL,HL		;64KB→32KB
	ADD	HL,HL		;32KB→16KB
	ADD	HL,HL		;16KB→8KB	バンク切り替えのサイズに合わせる
	ADD	A,H
	LD	(BANK1_SEL),A			;ASCII-8K/Konami-8K
	LD	(KONAMI_SCC_BANK1_SEL),A	;Konami-8K/Konami-SCC
	LD	(_BANK),A
	LD	A,C		;C=読み出し元
	AND	01FH		;セグメントのサイズでフィルタする(8K:1F)
#endif
DISKIO2:
	ADD	A,high BANK1_ADR
	LD	H,A
	LD	BC,(SECSZ)	;BCは読み出すセクタサイズ
	LD	L,C		;C=0
	CALL	ROM_LDIR
	EX	DE,HL
	POP	AF
	POP	DE
	INC	DE
	POP	BC
	DJNZ	DISKIO1
	LD	B,C

	POP	HL
	XOR	A
	RET

DSKCHG:
	CALL	IS_BPB
	JR	C,NOTREADY
	LD	A,(DRVTBL+2)
	OR	A
	JR	NZ,DSKCHG1
	LD	A,(DRVTBL)
	CP	2
	JR	NZ,DSKCHG1
	CALL	IS_BPB
	JR	NC,DSKCHG1
	LD	A,1			;ドライブテーブルを拡張 A:Tablacus DISK ROM B:MASTER SLOT ROM
	LD	(DRVTBL),A
	LD	(DRVTBL+2),A
	LD	A,(MASTERS)
	LD	(DRVTBL+3),A
DSKCHG1:
	XOR	A
	LD	B,1
	RET
NOTREADY:
	LD	A,2
	SCF
	RET

NO_BPB:
	POP	HL
	INC	HL
	LD	DE,DPB2DD
	LD	BC,DPB2DD_E-DPB2DD
	LDIR
	XOR	A
	RET

IS_BPB:
; in
; A=DRIVE 0:A 1:B
; out
; CF=0ディスクは存在する CF=1 ディスクは存在しない
	CALL	GET_DISK_BANK

	LD	A,(BANK1_ADR+21)	;BPB_Media
	CP	1
	RET	C

	LD	A,(BANK1_ADR+11)	;BPB_BytsPerSec
	ADD	A,0FFH
	RET	C

	LD	A,(BANK1_ADR+12)	;BPB_BytsPerSec
IS_BPB1:
	CP	1
	RET	Z
	CP	2
	RET	Z
	CP	4
	RET	Z
	SCF
	RET

GETDPB:
	PUSH	HL
	CALL	GET_DISK_BANK

	LD	A,(BANK1_ADR+21)	;BPB_Media
	OR	A
	JR	Z,NO_BPB
	POP	IX
	LD	(IX+1),A		;MEDIA

	LD	A,(BANK1_ADR+11)	;BPB_BytsPerSec
	LD	(IX+2),A		;SECSIZ LOW

	LD	A,(BANK1_ADR+12)	;BPB_BytsPerSec
	LD	(IX+3),A		;SECSIZ HIGH

	ADD	A,A
	ADD	A,A
	ADD	A,A
	DEC	A
	LD	(IX+4),A		;DIRMSK

	LD	B,-1
	AND	A			;無限ループ阻止
GETDPB1:
	INC	B
	RRA
	JR	C,GETDPB1
	LD	(IX+5),B		;DIRSHFT

	LD	A,(BANK1_ADR+13)	;BPB_SecPerClus
	DEC	A
	LD	(IX+6),A		;CLUSMSK

	AND	A			;無限ループ阻止
	LD	B,-1
GETDPB2:
	INC	B
	RRA
	JR	C,GETDPB2
	INC	B
	LD	(IX+7),B		;CLUSSHFT

	LD	HL,(BANK1_ADR+14)	;BPB_RsvdSecCnt
	LD	(IX+8),L		;FIRFAT LOW
	LD	(IX+9),H		;FIRFAT HIGH

	LD	A,(BANK1_ADR+16)	;BPB_NumFATs
	LD	(IX+10),A		;FATCNT

	LD	A,(BANK1_ADR+17)	;BPB_RootEntCnt
	LD	(IX+11),A		;MAXENT

	LD	DE,(BANK1_ADR+22)	;BPB_FATSz16
	LD	(IX+16),E		;FATSIZ

	LD	B,(IX+10)		;FATCNT
	LD	HL,0
GETDPB3:
	ADD	HL,DE
	DJNZ	GETDPB3
GETDPB4:
	LD	E,(IX+8)		;FIRFAT
	LD	D,(IX+9)		;FIRFAT
	ADD	HL,DE
	LD	(IX+17),L		;FIRDIR
	LD	(IX+18),H		;FIRDIR

	LD	A,(IX+3)		;SECSIZ HIGH
	ADD	A,A
	ADD	A,A
	LD	E,(IX+11)		;MAXENT
GETDPB5:
	SRL	E
	RRA
	JR	NC,GETDPB5
	LD	D,0
	ADD	HL,DE
	LD	(IX+12),L		;FIRREC
	LD	(IX+13),H		;FIRREC

	LD	HL,(BANK1_ADR+19)	;BPB_TotSec16

	LD	E,(IX+12)		;FIRREC
	LD	D,(IX+13)		;FIRREC
	AND	A
	SBC	HL,DE

	LD	A,(IX+6)		;CLUSMSK
	INC	A
	SCF				;無限ループ阻止
GETDPB6:
	RRA
	JR	C,GETDPB7
	SRL	H
	RR	L
	JR	GETDPB6
GETDPB7:
	INC	HL
	LD	(IX+14),L		;MAXCLUS
	LD	(IX+15),H		;MAXCLUS

	;1セクタが512バイト以上の場合を考慮(2HD/1セクタ1024バイト/1.23MB等)
GETDPBD1:
	LD	A,(IX+3)		;SECSIZ HIGH
	AND	0FCH
	RET	Z

	SRL	(IX+3)			;SECSIZ HIGH

	SCF
	RL	(IX+6)			;CLUSMSK

	INC	(IX+7)			;CLUSSHFT

	SLA	(IX+8)			;FIRFAT LOW
	RL	(IX+9)			;FIRFAT HIGH

	SLA	(IX+14),L		;MAXCLUS
	RL	(IX+15),H		;MAXCLUS

	SLA	(IX+16)			;FATSIZ

	SLA	(IX+17)			;FIRDIR
	RL	(IX+18)			;FIRDIR

	LD	L,(IX+17)		;FIRDIR
	LD	H,(IX+18)		;FIRDIR

	LD	A,(IX+3)		;SECSIZ HIGH
	ADD	A,A
	ADD	A,A
	LD	E,(IX+11)		;MAXENT
GETDPBD5:
	SRL	E
	RRA
	JR	NC,GETDPBD5
	LD	D,0
	ADD	HL,DE
	LD	(IX+12),L		;FIRREC
	LD	(IX+13),H		;FIRREC

	JR	GETDPBD1

CHOICE:
	LD	HL,0
	RET

DSKFMT:
	XOR	A
	SCF
DSKSTP:
	RET

BASENT:
	DB	03EH
	RST	30H
	LD	(H_PINL),A
	LD	A,(MASTERS)
	LD	(H_PINL+1),A
	LD	HL,BOOT_BASIC
	LD	(H_PINL+2),HL
	DB	03EH
	RET
	LD	(H_PINL+4),A

#if exists _RAM64K
	LD	A,(EXPTBL)	;メインROMに切り替える
	CALL	ENASLT_00H
#endif
	;BASICを起動する
	LD	IY,(EXPTBL-1) ;メインROMスロット
	LD	IX,ST_BAS	;continue start of MSX-BASIC without executing BASIC programs in ROM
	JP	CALBAS

BOOT_BASIC:
	DB	03EH
	RET
	LD	(H_PINL),A

	LD	HL,(STKTOP)
	LD	A,(REBOOT)
	ADD	A,0FFH
	JR	C,REBOOT1
	LD	HL,AUTOEXEC
	LD	DE,FDRV
	LD	BC,1+8+3
	LDIR
	CALL	ROM_OPEN
	CALL	NC,ROM_LOAD1
REBOOT1:
	LD	HL,DELOK
	CALL	MSX
	LD	HL,CMD_RUN
	LD	DE,KBUF
	LD	BC,CMD_RUN_E-CMD_RUN
	PUSH	DE
	LDIR
	JR	NC,REBOOT2
	XOR	A
	LD	(KBUF+CMD_CLEAR_E-CMD_RUN),A
REBOOT2:
	POP	HL
	LD	IX,NEWSTT
	JP	CALSLT_BIOS

GETSLT:
	LD	A,(DRVTBL+1)
	RET

SET_CD_FDRV:
	LD	A,(FDRV)
	CALL	GET_DRIVE
	CP	1
	JR	Z,SET_CD_B
	LD	(_CD_A),HL
	RET
SET_CD_B:
	LD	(_CD_B),HL
	RET

GET_CD_CDRV:
	CALL	GET_DRIVE
GET_CD:
	CP	1
	LD	HL,(_CD_A)
	RET	NZ
	LD	HL,(_CD_B)
	RET

GET_DRIVE_FDRV:
	LD	A,(FDRV)
GET_DRIVE:
	SUB	1
	RET	NC
	LD	A,(_DVSW)
	RET

GET_DISK_BANK_H:
	LD	A,(_LVECTOR)
	AND	080H
	ADD	A,A
	JR	C,SET_DISK_BANK_A
	JR	SET_DISK_BANK
GET_DISK_BANK_FDRV:
	CALL	GET_DRIVE_FDRV
GET_DISK_BANK:
	CP	7		;H:
	JR	Z,GET_DISK_BANK_H
	OR	A		;A=DRIVE
SET_DISK_BANK_A:
	LD	A,DISK_BANK
	JR	Z,SET_DISK_BANK
#if exists FIX_DRIVE
	LD	A,FIX_DRIVE
#else
	LD	A,(B_DRIVE)
#endif
SET_DISK_BANK:
#if exists USE_NORMAL32K_OR_ASCII16
	LD	(ASCII16_BANK1_SEL),A		;ASCII-16K
#else
	LD	(BANK1_SEL),A			;ASCII-8K/Konami-8K
	LD	(KONAMI_SCC_BANK1_SEL),A	;Konami-8K/Konami-SCC
#endif
	PUSH	AF
	PUSH	HL
	LD	HL,(BANK1_ADR+11)	;BPB_BytsPerSec
	LD	(SECSZ),HL
	LD	A,(BANK1_ADR+13)	;BPB_SecPerClus
	CALL	MUL_AHL
	LD	(CLSZ),HL
	POP	HL
	POP	AF
	RET

;	HL = HL * A ただし、A=1,2,4,8,16,32,64,128(2のべき乗に限る)0の場合は256倍
MUL_AHL:
	SCF		;無限ループ回避
MUL_AHL1:
	RRA		;->CF
	RET	C
	ADD	HL,HL
	JR	MUL_AHL1

DPB2DD:
	DB	0F9H	;MEDIA
	DW	00200H	;SECSIZ
	DB	00FH	;DIRMSK
	DB	004H	;DIRSHFT
	DB	001H	;CLUSMSK
	DB	002H	;CLUSSHFT
	DW	00001H	;FIRFAT
	DB	002H	;FATCNT
	DB	070H	;MAXENT
	DW	0000EH	;FIRREC
	DW	002CAH	;MAXCLUS
	DB	003H	;FATSIZ
	DW	0007H	;FIRDIR
DPB2DD_E:

AUTOEXEC:
	DB	0,"AUTOEXECBAS"
CMD_RUN:
	DB	03AH,092H,00FH,200,',',00CH	;CLEAR200,&HF280
	DW	NEW_HIMEM
CMD_CLEAR_E:
	DB	03AH,08AH,0			;RUN
CMD_RUN_E:
DELOK:
	DB	01EH,01BH,'K',0
