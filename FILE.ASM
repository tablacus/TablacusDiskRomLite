ROM_LDIR:
	LD	A,(FLG_LDIR)
	OR	A
	JR	NZ,ROM_LDIRVM
	BIT	7,D
	JP	Z,ROM_LDIRSLT

#if exists USE_NORMAL_32K_ROM
	LD	(_SP),SP
	LD	SP,DRVTBL
LDIR1:
	LD	A,B
	OR	C
	JR	Z,LDIRE

	PUSH	BC
	PUSH	DE
	PUSH	HL
	LD	A,(ROM_SLT)
	LD	H,080H
	CALL	_ENASLT
	POP	HL
	POP	DE
	POP	BC
LDIR2:
	LD	A,D
	CP	0C0H
	JR	NC,LDIR4

	PUSH	BC
	PUSH	DE
	LD	DE,BUF

	LD	A,B
	OR	A
	JR	Z,LDIR3
	LD	BC,00100H
LDIR3:
	PUSH	BC
	LDIR
	LD	(_HL),HL

	LD	A,(RAMAD2)
	LD	H,080H
	CALL	_ENASLT

	LD	HL,BUF
	POP	BC
	POP	DE
	LDIR

	LD	HL,(_HL)
	POP	BC
	LD	A,B
	OR	A
	JR	Z,LDIRE
	DEC	B
	JR	LDIR1
LDIR4:
#endif
	LDIR

#if exists USE_NORMAL_32K_ROM
LDIRE:
	PUSH	DE
	PUSH	HL
	LD	A,(RAMAD2)
	LD	H,080H
	CALL	_ENASLT
	POP	HL
	POP	DE
	LD	SP,(_SP)
#endif
	RET

ROM_LDIRVM:
#if exists USE_NORMAL_32K_ROM
	PUSH	BC
	PUSH	DE
	PUSH	HL
	LD	A,(ROM_SLT)
	LD	H,080H
	CALL	_ENASLT
	POP	HL
	POP	DE
	POP	BC
#endif
	PUSH	BC
	PUSH	DE
	LD	IY,(EXPTBL-1) ;メインROMスロット
	LD	IX,LDIRVM
	CALL	_CALSLT
#if exists USE_NORMAL_32K_ROM
	LD	H,080H
	LD	A,(RAMAD2)
	CALL	_ENASLT
#endif
	POP	HL
	POP	BC
	ADD	HL,BC
	EX	DE,HL
	RET

ROM_LDIRSLT:
	EX	DE,HL
RLDIRSLT1:
	LD	A,(DE)
	INC	DE
	PUSH	BC
	PUSH	DE
	PUSH	HL
	LD	E,A
	LD	A,(RAMAD1)
	LD	IY,(EXPTBL-1) 	;メインROMスロット
	LD	IX,_WRSLT
	CALL	_CALSLT
	POP	HL
	POP	DE
	POP	BC
	CPI			;HL=HL+1 BC=BC-1 BCが0の場合にP/V=0
	JP	PE,RLDIRSLT1
	EX	DE,HL
	RET

END_OF_LINE:
	LD	HL,BUF
EOL1:
	LD	A,(HL)
	RET	Z
	CP	00DH
	JR	Z,EOLE
	CP	00AH
	JR	Z,EOLE
	INC	HL
	JR	EOL1
EOLE:
	LD	(HL),0
	INC	HL
	LD	A,(HL)
	CP	00AH
	RET	NZ
	INC	HL
	RET

ROM_LOAD_ASCII:
	LD	HL,0
	LD	(_BUF_ST),HL	;読み出し位置
	LD	HL,(TXTTAB)
	LD	(_BUF_EN),HL	;書き出し位置

	LD	HL,BUF
	LD	(_DTA),HL
RLOAD_A1:
	LD	HL,(_BUF_ST)
	LD	(RR_LOW),HL
	LD	HL,258
	CALL	ROM_READ
	LD	A,H
	OR	L
	JR	Z,RLOAD_AEND
	LD	BC,BUF
	ADD	HL,BC
	LD	(HL),0
	CALL	END_OF_LINE
	LD	BC,BUF
	AND	A
	SBC	HL,BC
	JR	Z,RLOAD_A2
	LD	C,L
	LD	B,H
	LD	DE,(_BUF_ST)
	ADD	HL,DE
	LD	(_BUF_ST),HL
	LD	A,(BUF)
	OR	A
	JR	Z,RLOAD_A1
RLOAD_A2:
	LD	DE,BUF
	CALL	SPCUTEX
	LD	A,(DE)
	OR	A
	JR	Z,RLOAD_AEND
	CALL	GETNUM
	LD	A,H
	OR	L
	JP	Z,ERROR_DIRECT_IN_FILE
	LD	IX,(_BUF_EN)
	LD	(IX+2),L
	LD	(IX+3),H

	CALL	SPCUT
	EX	DE,HL
	PUSH	IX
	LD	IX,CRUNCH
	LD	IY,(EXPTBL-1) 	;メインROMスロット
	CALL	_CALSLT
	POP	IX
	EX	DE,HL
	LD	DE,KBUF
	SCF
	SBC	HL,DE
	JR	Z,ERROR_DIRECT_IN_FILE
	JR	C,ERROR_DIRECT_IN_FILE
	LD	C,L
	LD	B,H
	LD	HL,(_BUF_EN)
	LD	DE,4
	ADD	HL,DE
	LD	DE,KBUF

	EX	DE,HL
	LDIR
	EX	DE,HL

	LD	(IX+0),L
	LD	(IX+1),H
	LD	(_BUF_EN),HL
	JP	RLOAD_A1

RLOAD_AEND:
	LD	HL,(_BUF_EN)
	XOR	A
	LD	(HL),A
	INC	HL
	LD	(HL),A
	INC	HL
	LD	(_BUF_EN),HL
	JR	RLOAD_END1

ROM_LOAD:
	CALL	INIT_PARAM
	CALL	FILE_B
	LD	A,(FNAME)
	CP	020H
	JP	Z,ROM_ORG

	CALL	ROM_OPEN
	JR	C,ERROR_FILE_NOT_FOUND

	LD	HL,_BUF
	LD	(_DTA),HL
	LD	HL,1			;ヘッダを1バイト読み込む
	CALL	ROM_READ
	LD	A,(_BUF)
	INC	A
	JP	NZ,ROM_LOAD_ASCII
	LD	HL,(TXTTAB)
	LD	(_DTA),HL
	EX	DE,HL
	LD	HL,-256
	ADD	HL,SP
	SBC	HL,DE
	CALL	ROM_READ
	LD	DE,(_DTA)
	ADD	HL,DE
RLOAD_END1:
	LD	(VARTAB),HL
	LD	(ARYTAB),HL
	LD	(STREND),HL

	XOR	A
	LD	HL,_BUF+3
	LD	(HL),A
	DEC	HL
	LD	(HL),A
	DEC	HL
	LD	(HL),A
	DEC	HL
	LD	A,08FH			;REM
	LD	(HL),A
	RET

ERROR_DIRECT_IN_FILE:
	LD	E,57 			;Direct statement in file
	DB	1			;LD	BC,
ERROR_FILE_NOT_OPEN:
	LD	E,59			;File not OPEN
	DB	1			;LD	BC,
ERROR_FILE_NOT_FOUND:
	LD	E,53			;File not found
ERROR:
	LD	IY,(EXPTBL-1) ;メインROMスロット
	LD	IX,ERRHAND
	JP	_CALSLT

ROM_BLOAD:
	CALL	INIT_PARAM
	CALL	FILE_B
	CALL	ROM_OPEN
	JR	C,ERROR_FILE_NOT_FOUND

	LD	HL,_BUF
	LD	(_DTA),HL
	LD	HL,7			;ヘッダを7バイト読み込む
	CALL	ROM_READ
	LD	A,(_BUF)
	CP	0FEH
	JR	NZ,ERROR_FILE_NOT_OPEN

	LD	HL,BLOAD_RET
	LD	(SWC_BLOAD),HL

	LD	HL,(PARAM1)
	LD	A,(HL)
	CP	','
	JR	NZ,RBREAD_MEM
	INC	HL
	LD	A,(HL)
	CALL	CAP
	LD	(RUNBNF),A
RBOS1:
	LD	A,(HL)
	INC	HL
	OR	A
	JR	Z,RBREAD_OSE
	CP	':'
	JR	Z,RBREAD_OSE
	CP	','		;次のパラメータを探す
	JR	NZ,RBOS1
				;オフセット
	LD	(PARAM1),HL
	LD	A,(HL)
	OR	A
	JR	Z,RBREAD_OSE
	LD	IX,FRMEVL
	LD	IY,(EXPTBL-1) 	;メインROMスロット
	CALL	_CALSLT
	LD	(PARAM1),HL
	LD	A,(VALTYP)
	CP	2
	JR	NZ,RBREAD_OSE
	LD	HL,(_BUF_ST)
	LD	DE,(DACDAT)
	ADD	HL,DE
	LD	(_BUF_ST),HL
RBREAD_OSE:
	LD	A,(RUNBNF)
	CP	'S'
	JR	NZ,RBREAD_MEM
	LD	A,1
	LD	(FLG_LDIR),A
RBREAD_MEM:
	LD	HL,(_BUF_ST)
	LD	(SAVENT),HL
	LD	(_DTA),HL
	LD	HL,0FFFFH
	CALL	ROM_READ
	LD	A,(RUNBNF)
	CP	'R'
	JR	NZ,RBREAD1
	LD	HL,(_BUF_EX)
	LD	(SWC_BLOAD),HL
RBREAD1:
ROM_NEXT:
	LD	HL,(PARAM1)
	LD	A,(HL)
	DEC	HL
	OR	A
	JR	Z,RN1
	CP	':'
	JR	Z,RN1
	INC	HL
RN1:
	LD	E,L
	LD	D,H

	CALL	SEARCH_END
	OR	A
	JR	Z,REM
RN3:					;マルチステートメントの処理
	LD	A,(HL)

	CP	0B5H			;LOAD
	JP	Z,ROM_LOAD
	CP	08AH			;RUN
	JR	Z,ROM_RUN
	CP	0B7H			;FILES
	JR	Z,ROM_FILES
	CP	0D6H			;COPY
	JP	Z,ROM_COPY
	CP	020H
	JR	Z,RN_SP

	LD	A,028H			;JR Z,
	LD	(SWC_BLOAD_M),A
	LD	A,(HL)
	RET
RN_SP:
	INC	HL
	JR	RN3

REM:
	EX	DE,HL
	LD	A,08FH			;REM
	RET

ROM_RUN:
	INC	HL
	LD	A,(HL)
	DEC	HL
	OR	A
	JR	Z,ROM_RUN1
	CALL	ROM_LOAD
ROM_RUN1:
	LD	A,08AH			;RUN
	LD	(HL),A
	RET

ROM_FILES:
	CALL	INIT_PARAM
	CALL	FILE_B
	CALL	GET_DISK_BANK_FDRV
	LD	(BANK1_SEL),A			;ASCII-8K/Konami-8K
	LD	(KONAMI_SCC_BANK1_SEL),A	;Konami-8K/Konami-SCC
	LD	A,(FNAME)
	CP	021H
	JR	NC,RFILES0
	LD	B,11
	CALL	FILE10
RFILES0:
	CALL	GET_DIR_DAT
RFILES1:
	CALL	FILESE
	JR	NC,RFILES_NOT_MATCH
RFILES_DISP:
	PUSH	HL
	LD	B,8
	CALL	MSN
	LD	A,'.'
	CALL	MSG_A
	LD	B,3
	CALL	MSN
	LD	A,(CSRX)
	LD	B,A
	LD	A,(LINLEN)
	SUB	B
	CP	12
	JR	NC,RFILES2
	LD	A,00DH		;改行
	CALL	MSG_A
	LD	A,00AH
	JR	RFILES3
RFILES2:
	LD	A,020H
RFILES3:
	CALL	MSG_A
	POP	HL
	CALL	FNEXT
RFILES_NOT_MATCH:
	JR	NZ,RFILES1
	JP	ROM_NEXT

INIT_PARAM:
	LD	(PARAM0),HL
	LD	(PARAM1),HL
	EX	DE,HL
	XOR	A
	LD	(FLG_LDIR),A
	LD	(RUNBNF),A
	LD	(VALTYP),A
	INC	DE
	CALL	SPCUT
	LD	A,(DE)
	OR	A
	RET	Z
	CP	':'
	RET	Z
	CP	'('
	RET	Z
	EX	DE,HL
	LD	IX,FRMEVL
	LD	IY,(EXPTBL-1) 	;メインROMスロット
	CALL	_CALSLT
	LD	(PARAM1),HL
	RET

	NOP
ROM_COPY:
	CALL	INIT_PARAM
	LD	A,(VALTYP)
	CP	3		;string
	JP	NZ,ROM_ORG	;最初の引数が文字列ではない場合はオリジナルを実行する

	CALL	FILE_B
	CALL	ROM_OPEN
	JP	C,ERROR_FILE_NOT_FOUND

	LD	HL,_BUF_W
	LD	(_DTA),HL
	LD	HL,4			;ヘッダを4バイト読み込む
	CALL	ROM_READ

	XOR	A
	LD	(_BUF_LO),A		;PSET
	LD	(_BUF_O),A		;向き

	LD	HL,(PARAM1)
RCP_PARAM1:
	LD	A,(HL)
	INC	HL
	OR	A
	JP	Z,ROM_ORG
	CP	':'
	JP	Z,ROM_ORG
	CP	','
	JR	NZ,RCP_PARAM1_

	LD	IX,FRMQNT
	LD	IY,(EXPTBL-1) 	;メインROMスロット
	CALL	_CALSLT
	LD	A,E
	ADD	A,A
	ADD	A,A
	LD	(_BUF_O),A
	LD	A,(HL)
RCP_PARAM1_:
	CP	'('
	JR	NZ,RCP_PARAM1

	LD	IX,FRMQNT
	LD	IY,(EXPTBL-1) 	;メインROMスロット
	CALL	_CALSLT

	LD	(_BUF_X),DE

RCP_PARAM2:
	INC	HL
	LD	A,(HL)
	CP	020H
	JR	Z,RCP_PARAM2
	CP	','
	JR	Z,RCP_PARAM2

	LD	IX,FRMQNT
	LD	IY,(EXPTBL-1) 	;メインROMスロット
	CALL	_CALSLT

	LD	(_BUF_Y),DE
RCP_PARAM3:
	INC	HL
	LD	A,(HL)
	CP	020H
	JR	Z,RCP_PARAM3
	CP	')'
	JR	Z,RCP_PARAM3
	CP	','
	JR	NZ,RCP_ST

	INC	HL
	LD	IX,FRMQNT
	LD	IY,(EXPTBL-1) 	;メインROMスロット
	CALL	_CALSLT

	LD	A,E
	LD	(_BUF_P),A

RCP_PARAM4:
	LD	A,(HL)
	INC	HL
	CP	020H
	JR	Z,RCP_PARAM4

	CP	','
	JR	NZ,RCP_ST

	LD	A,(HL)
	LD	B,4
	CP	0C3H		;PRESET
	JR	Z,RCP_LO
	DEC	B		;3
	SUB	0F8H		;XOR
	JR	Z,RCP_LO
	DEC	B		;2
	INC	A		;OR
	JR	Z,RCP_LO
	DEC	B		;1
	INC	A		;AND
	JR	Z,RCP_LO
	DEC	B		;0
				;PSET
RCP_LO:
	LD	A,B
	LD	(_BUF_LO),A
RCP_ST:
	LD	HL,(STREND)
	LD	(_DTA),HL
	EX	DE,HL
	LD	HL,-512
	ADD	HL,SP
	XOR	A
	SBC	HL,DE
	JR	NC,RCP0
	LD	HL,BUF
	LD	(_DTA),HL
	LD	L,A	;0
	LD	H,A	;0
RCP0:
	INC	H
	LD	(_BUF_EN),HL
RCP1:
	DI
	CALL	WAIT_VDP

	LD	A,(WRVDP)
	LD	C,A
	INC	C		;C := PORT#1's address(WR)
	LD	A,36
	OUT	(C),A
	LD	A,080H+17
	OUT	(C),A		;R#17 := 36

	INC	C
	INC	C		;C := PORT#3's address(WR)
	LD	HL,(_BUF_X)
	OUT	(C),L		;R#36 DX
	OUT	(C),H		;R#37
	LD	HL,(_BUF_Y)
	OUT	(C),L		;R#38 DY
	OUT	(C),H		;R#39
	LD	HL,(_BUF_W)
	OUT	(C),L		;R#40 NX
	OUT	(C),H		;R#41
	LD	HL,(_BUF_H)
	OUT	(C),L		;R#42 NY
	OUT	(C),H		;R#43

	LD	IX,(SCRMOD)
	LD	A,(_BUF_LO)	;LOGICAL OPERATION
	OR	A
	JR	NZ,USE_LMMC	;PSETじゃない場合はLMMC

	LD	A,IXL
	CP	8
	JR	Z,USE_HMMC8	;スクリーン8でPSET
	CP	6
	LD	HL,(_BUF_X)
	LD	A,(_BUF_W)
	JR	NZ,SCR57
	OR	L		;スクリーン6
	AND	3
	JR	NZ,USE_LMMC
SCR57:				;スクリーン5,7
	OR	L
	AND	1
	JR	NZ,USE_LMMC
USE_HMMC:
	LD	IXL,8
USE_HMMC8:
	LD	A,0F0H		;R#46 HMMC command
	LD	(_BUF_LO),A
USE_LMMC:
	LD	DE,0
	LD	B,-1
	CALL	GET_PIXEL
	OUT	(C),A		;R#44 first DATA
	LD	A,(_BUF_O)
	OUT	(C),A		;R#45 DIX and DIY

	LD	A,(_BUF_LO)	;LOGICAL OPERATION
	OR	0B0H		;R#46 LMMC command
	OUT	(C),A

	LD	IYL,C		;IYL := PORT#3's address(WR)
	DEC	C
	DEC	C		;C := PORT#1's address(WR)
	LD	A,080H+44
	OUT	(C),A
	LD	A,080H+17
	OUT	(C),A		;R#17 := 44

	LD	A,(RDVDP)
	INC	A
	LD	IYH,A		;IYX := PORT#1's address(RD)
   	LD	A,2
	OUT	(C),A
	LD	A,08FH
	OUT	(C),A
	LD	A,(_BUF_LO)	;LOGICAL OPERATION
	AND	040H
	JR	NZ,LOOP_HMMC
LOOP_COPY:
	CALL	GET_PIXEL
	EX	AF,AF'
	LD	C,IYH
LOOP_COPY1:
	IN	A,(C)
	RRCA			;RRCAではサインフラグは変化しない
	JR	NC,EXIT_COPY	;check CE bit
	JP	P,LOOP_COPY1	;check TR bit
	EX	AF,AF'
	LD	C,IYL		;IYL := PORT#3's address(WR)
	OUT	(C),A
	JR	LOOP_COPY

EXIT_COPY:
	CALL	GET_STATUS_0
	EI
	JP	ROM_NEXT

LOOP_HMMC:
	LD	C,IYL		;IYL := PORT#3's address(WR)
	LD	B,E
	LD	A,E
	OR	A
	JR	Z,LOOP_HMMC1
	OTIR
LOOP_HMMC1:
	INC	D
LOOP_HMMC2:
	DEC	D
	JR	Z,LOOP_HMMC3
	OTIR
	JP	LOOP_HMMC2
LOOP_HMMC3:
	IN	A,(C)
	RRCA
	JR	NC,EXIT_COPY	;check CE bit
	LD	HL,(_BUF_EN)
	CALL	ROM_READ
	EX	DE,HL
	LD	HL,(_DTA)
	LD	A,D
	OR	E
	JR	NZ,LOOP_HMMC
	JR	LOOP_COPY1
	
WAIT_VDP:
	LD	A,2
	CALL	GET_STATUS
	RRCA
	JR	C,WAIT_VDP
GET_STATUS_0:
	XOR	A
GET_STATUS:
	PUSH	BC
	LD	BC,(RDVDP)
	INC	C
	OUT	(C),A
	LD	A,08FH
	OUT	(C),A
	IN	A,(C)
	POP	BC
	RET

GET_PIXEL256:
	LD	A,D
	OR	E
	JR	NZ,GET_PIXEL1
	LD	HL,(_BUF_EN)
	CALL	ROM_READ
	EX	DE,HL
	LD	HL,(_DTA)
GET_PIXEL1:
	LD	A,(HL)
	INC	HL
	DEC	DE
	RET

GET_PIXEL:
	INC	B
	LD	A,IXL
	CP	8
	JR	Z,GET_PIXEL256
	CP	6
	JR	Z,GET_PIXEL4

	BIT	0,B
	JR	NZ,GET_PIXEL1

	LD	A,D
	OR	E
	JR	NZ,GET_PIXEL2

	LD	HL,(_BUF_EN)
	CALL	ROM_READ
	EX	DE,HL
	LD	HL,(_DTA)

GET_PIXEL2:
	LD	A,(HL)
	RRCA
	RRCA
	RRCA
	RRCA
	RET

GET_PIXEL3:
	LD	A,D
	OR	E
	JR	NZ,GET_PIXEL5

	LD	HL,(_BUF_EN)
	CALL	ROM_READ
	EX	DE,HL
	LD	HL,(_DTA)
GET_PIXEL5:
	LD	A,(HL)
	RRCA
	RRCA
	RRCA
	RRCA
	RRCA
	RRCA
	RET

GET_PIXEL4:
	LD	A,B
	AND	3	;+0
	JR	Z,GET_PIXEL3
	DEC	A	;+1
	JR	Z,GET_PIXEL2
	DEC	A	;+2
	LD	A,(HL)
	RET	NZ
	RRCA		;+3
	RRCA
	RET

ROM_READ:
	PUSH	HL
	PUSH	DE
	PUSH	BC
	PUSH	IY
	LD	(LEFTX),HL
	LD	HL,(_DTA)
	LD	(DTAX),HL
	LD	HL,(LEFTX)

	CALL	RBX1
	JR	C,RBRERR1
	LD	A,C
	EX	DE,HL
	SBC	HL,DE		;CP 0HL,CDE
	ADD	HL,DE
	SBC	A,000H
	JR	C,RBR1
	EX	DE,HL
RBR1:
	SBC	A,A
	AND	1
	LD	(_RESULT),A
	LD	A,H
	OR	L
	JP	Z,RBREND0

	LD	(_LEFT),HL	;Read record byte
	LD	(LEFTX),HL

	CALL	RBX2
	JR	Z,RBRB
				;先頭の端数
	CALL	RBXA
	JP	C,RBRERR
	PUSH	BC
	CALL	ROM_LDIR
	LD	(DTAX),DE
	LD	HL,(LEFTX)
	POP	DE
	AND	A
	SBC	HL,DE
	LD	(LEFTX),HL
	JR	Z,RBREND

RBRB:
	CALL	RBXB
	JR	Z,RBRC
RBRB1:
	PUSH	BC
	PUSH	DE
	CALL	CLUST
	EX	DE,HL
	LD	BC,(CLSZ)		;1クラスタのサイズ
	CALL	ROM_LDIR
	EX	DE,HL
	POP	DE
	POP	BC
	CALL	GNCL
	JP	C,RBRERR
	DJNZ	RBRB1
RBRC:
	CALL	RBXC
	JR	Z,RBREND

	CALL	CLUST
	EX	DE,HL
	CALL	ROM_LDIR
RBREND:
	CALL	RBXEND
RBREND0:
	POP	IY
	POP	BC
	POP	DE
	POP	AF	;(HL)
	XOR	A
	LD	A,(_RESULT)
	RET

RBRERR1:
	LD	A,001H
RBRERR2:
	POP	IY
	POP	BC
	POP	DE
	POP	HL
	SCF
	LD	HL,0
	RET
RBRERR:
	LD	A,0FFH
	JR	RBRERR2

FILE_DD:
	DB	03EH
	RET
	LD	(SWC_BLOAD_M),A
ROM_ORG:
	LD	HL,(PARAM0)
	LD	A,(HL)
	RET
FILE_B:
	XOR	A
	LD	(FDRV),A
	LD	E,0
	LD	A,(VALTYP)
	CP	3		;string
	JR	NZ,FILED

	LD	IX,FRESTR
	LD	IY,(EXPTBL-1) 	;メインROMスロット
	CALL	_CALSLT
	PUSH	HL
	POP	IX

	LD	E,(IX+0)
	LD	A,(IX+1)
	LD	D,(IX+2)
	LD	IXH,D
	LD	IXL,A
	LD	A,E
	CP	4
	JR	C,FILEB1
	LD	A,(IX+3)
	CP	':'
	JR	Z,FILE_DD
	LD	A,E
FILEB1:
	CP	2
	JR	C,FILED
	LD	A,(IX+1)
	CP	':'
	JR	NZ,DEVI1
	LD	A,(IX+0)		;DRIVE
	CALL	CAP
	SUB	'@'
	INC	IX
	INC	IX
	DEC	E
	DEC	E
	LD	(FDRV),A
DEVI1:

FILED:
	CALL	FILEI
	LD	HL,FNAME

	LD	B,8
FILE2:
	CALL	CCHKF
	RET	Z
	CP	'*'
	JR	Z,FILE9
	CP	'.'
	JR	Z,FILE4
	LD	(HL),A
	INC	HL
	DJNZ	FILE2

FILE3:
	CALL	CCHKF
	RET	Z
	CP	'.'
	JR	NZ,FILE3

FILE4:
	LD	HL,FNAME+8
	LD	B,3

FILE4L:
	CALL	CCHKF
	RET	Z
	CP	'.'
	JR	NZ,FILE12
	LD	(FNAME),A	;Parent directory(..)
	LD	(FNAME+1),A
	LD	A,020H
FILE12:
	CP	'*'
	JR	Z,FILE10
	LD	(HL),A
	INC	HL
	DJNZ	FILE4L
	RET

FILE9:				;名前の*処理、名前の残りを?で埋める
	CALL	FILE10
	JR	FILE3

FILE10:
	LD	A,'?'
	JR	FILL_MEMORY
FILEI:				;名前＋拡張子をスペースで初期化
	LD	A,020H
	LD	BC,11*256	;C=0にしておく
	LD	HL,FNAME
FILL_MEMORY:			;HLからBバイトAで埋める
	LD	(HL),A
	INC	HL
	DJNZ	FILL_MEMORY
	RET

CCHKF:
	LD	A,E
	OR	A
	RET	Z
	LD	A,(IX+0)
	CALL	CCHK2
	RET	Z
	JP	FKAN

CCHK2:
	INC	C
	DEC	C
	RET	NZ
CCHK3:				;ZF=1 で使えない文字
	CP	'+'
	RET	Z
	CP	','
	RET	Z
	CP	'/'
	RET	Z
	CP	':'
	RET	Z
	CP	';'
	RET	Z
	CP	'='
	RET	Z
	CP	05CH	;\
	RET	Z
	CP	01FH
	RET	NC
	CP	A		;Z=1
	RET

SS1:
	INC	DE
SPCUT:				;スペースをカット
	LD	A,(DE)
	CP	020H
	JR	Z,SS1
	RET

SCREOF1:
	INC	DE
SPCUTEX:			;スペース改行などをカット
	LD	A,(DE)
	CP	020H
	JR	Z,SCREOF1
	CP	00DH
	JR	Z,SCREOF1
	CP	00AH
	JR	Z,SCREOF1
	CP	01AH
	JR	Z,SCREOF1
	RET

GETNUM:
	LD	HL,0
GETNUM1:
	LD	A,(DE)
	INC	DE
	SUB	'0'
	RET	C
	CP	10
	RET	NC
	LD	C,L
	LD	B,H
	ADD	HL,HL	;*2
	ADD	HL,HL	;*4
	ADD	HL,BC	;*5
	ADD	HL,HL	;*10
	LD	C,A
	LD	B,0
	ADD	HL,BC
	JR	GETNUM1

SEARCH_END:
	LD	A,(HL)
SEARCH_END1:
	INC	HL
	OR	A
	RET	Z
	CP	':'
	JR	NZ,SEARCH_END
	LD	A,(HL)
	CP	':'
	JR	Z,SEARCH_END1
	RET

FKANC:
	BIT	0,C
	CALL	Z,CAP2
	JR	FKANX
FKAN:			;漢字チェック
	INC	IX
	DEC	E
FKANX:
	BIT	0,C
	RES	0,C
	RET	NZ
	CP	080H
	RET	C
	CP	0A0H
	JR	C,FKAN1
	CP	0E0H
	RET	C
FKAN1:
	INC	C
	AND	A
	RET

CAP:
	CP	'a'
	RET	C
	CP	'z'+1
	RET	NC
	SUB	020H
	RET
CAP2:
	CALL	CAP
CAP3:				;
	CP	5
	JR	Z,CAP4
	CP	021H
	RET
CAP4:
	LD	A,0E5H
	RET

ROM_OPEN:
	CALL	GET_DISK_BANK_FDRV

	CALL	GET_DIR_DAT
	PUSH	DE
	CALL	FILESE
	POP	DE
	CCF
	RET	C
	LD	(FCBX),HL
	PUSH	HL
	LD	HL,0
	LD	(RR_LOW),HL
	LD	(RR_HIGH),HL
	POP	HL
	RET

FILESE:
	LD	A,(HL)
	OR	A
	RET	Z		;END:ZF=1 CF=0
	CP	0E5H
	JR	Z,FILESE1
	LD	DE,FNAME
	PUSH	HL
	CALL	CPFILE
	CALL	Z,CPFILE2
	POP	HL
	SCF
	RET	Z		;!!!:(ZF=1) CF=1
FILESE1:
	CALL	FNEXT
	JR	NZ,FILESE
ZF0_CF0_AFF_RET:
	OR	0FFH		;ZF=0 CF=0
	RET

FNEXT:
	LD	DE,020H
	ADD	HL,DE
	DEC	C
#if exists USE_NORMAL_32K_ROM
#else
CHECK_DIR_PAGE:			;ディレクトリが2ページ目に跨るかチェックする
	PUSH	AF
	BIT	7,H
	JR	Z,CHECK_DIR_PAGE1
	LD	A,H
	SUB	020H
	LD	H,A
	LD	A,(_BANK)
	INC	A
	LD	(BANK1_SEL),A			;ASCII-8K/Konami-8K
	LD	(KONAMI_SCC_BANK1_SEL),A	;Konami-8K/Konami-SCC
	LD	(_BANK),A
CHECK_DIR_PAGE1:
	POP	AF
#endif
	RET

CPFILE:
	PUSH	BC
	LD	BC,00B00H
CPSTR1:
	LD	A,(DE)
	CP	'?'		;Wild card
	JR	Z,CPSTR2
	LD	A,(HL)
	CALL	FKANC
	PUSH	HL
	LD	H,A
	LD	A,(DE)
	RLC	C
	CALL	FKANC
	RRC	C
	CP	H		;CP (HL),(DE)
	POP	HL
	JR	NZ,CPSTR3
CPSTR2:
	INC	DE
	INC	HL
	DJNZ	CPSTR1
CPSTR3:
	POP	BC
	RET

CPFILE2:
;	LD	A,(IY+13)	;(FCB)属性(アトリビュート)
;	OR	0E1H
	LD	A,0E1H
	CPL
	AND	(HL)
	RET

RBX1:
	PUSH	HL		;Record byte

	LD	DE,(RR_LOW)	;CDE=Random record
	LD	A,(RR_HIGH+1)
	LD	C,A

	CALL	GET_DISK_BANK_FDRV

	LD	IY,(FCBX)
	LD	L,(IY+01CH)	;AHL=File size
	LD	H,(IY+01DH)
	LD	A,(IY+01EH)

	AND	A
	SBC	HL,DE
	SBC	A,C
	POP	DE

	RET	C
	LD	C,A
	EX	DE,HL	;CDE=File byte	HL=Record byte
	OR	D
	OR	E
	RET	NZ
	SCF
	RET

RBX2:
	LD	BC,(RR_LOW+1)
	CALL	RWXR
	LD	A,(CLSZ_H)
	DEC	A
	PUSH	HL
	LD	HL,(RR_LOW)
	AND	H
	OR	L
	POP	HL
	RET

RBXA:
	PUSH	DE
	CALL	CLUST
	LD	(_DTPS),DE
	POP	DE
	CALL	GNCL
	RET	C
	LD	(_CLPS),DE

	LD	BC,(RR_LOW)
	LD	HL,(CLSZ)
	LD	A,H
	DEC	A
	AND	B
	LD	B,A
	SBC	HL,BC		;remaining cluster

	LD	DE,(LEFTX)
	SBC	HL,DE		;CP HL,DE
	ADD	HL,DE
	JR	C,RBXA1
	EX	DE,HL
RBXA1:
	LD	A,(_BANK)	;GNCLでバンクを切り替えたのでデータのあるバンク
	LD	(BANK1_SEL),A			;ASCII-8K/Konami-8K
	LD	(KONAMI_SCC_BANK1_SEL),A	;Konami-8K/Konami-SCC
	PUSH	HL
	LD	HL,(_DTPS)
	ADD	HL,BC
	LD	DE,(DTAX)
	POP	BC
	RET

RBXB:
	LD	HL,(DTAX)
	LD	DE,(_CLPS)
	LD	A,(LEFTX+1)
	LD	B,A
	LD	A,(CLSZ_H)	;1024=4 / 512=2 / 256=1
RBXB1:
	RRA		;->CF
	JR	C,RBXB2
	SRL	B	;B=B/2
	JR	RBXB1
RBXB2:
	LD	A,B
	OR	A
	RET

RBXC:
	LD	BC,(LEFTX)
	LD	A,(CLSZ_H)
	DEC	A
	AND	B
	LD	B,A
	OR	C
	RET

RBXEND:
	LD	DE,(_LEFT)
	LD	HL,(RR_LOW)
	LD	A,(RR_HIGH+1)
	ADD	HL,DE
	ADC	A,0
	LD	(RR_LOW),HL
	LD	(RR_HIGH+1),A
	EX	DE,HL		;HL=Read byte
	RET	

RWXR:
	LD	A,(CLSZ_H)	;1024=4 / 512=2 / 256=1
L_RWX:
	RRA		;->CF
	JR	C,E_RWX
	SRL	B	;BC=BC/2
	RR	C	;
	JR	L_RWX
E_RWX:
	CALL	GET_DISK_BANK_FDRV

	LD	IY,(FCBX)
	LD	E,(IY+01AH)	;ファイルの先頭クラスタ
	LD	D,(IY+01BH)
RWX1:
	LD	(_CLPS),DE
	LD	A,D
	OR	E
	SCF
	RET	Z

	LD	A,B
	OR	C
	RET	Z

	CALL	GNCL
	RET	C
	DEC	BC
	CALL	ENDCL
	JR	C,RWX1
	SCF
	RET

NCL3:
	CALL	GET_DISK_BANK_FDRV
	LD	(BANK1_SEL),A			;ASCII-8K/Konami-8K
	LD	(KONAMI_SCC_BANK1_SEL),A	;Konami-8K/Konami-SCC
	LD	L,E
	LD	H,D
	SRL	H
	RR	L
	RRA
	ADD	HL,DE
	LD	BC,BANK1_ADR
	ADD	HL,BC
	LD	BC,(SECSZ)
	ADD	HL,BC
	RLA
	RET

GNCL:
	LD	A,D
	OR	E
	SCF
	RET	Z
	PUSH	BC
	PUSH	HL
	CALL	NCL3
	JR	C,GNC1
	LD	E,(HL)
	INC	HL
	LD	A,(HL)
	AND	00FH
	LD	D,A
	POP	HL
	POP	BC
	RET
GNC1:
	LD	A,(HL)
	INC	HL
	LD	D,(HL)
	LD	B,4
GNC1L:
	SRL	D
	RRA
	DJNZ	GNC1L

	LD	E,A
	POP	HL
	POP	BC
	AND	A
	RET

CLUST:
	EX	DE,HL
	PUSH	BC
	LD	A,(CLSZ_H)
	CALL	MUL_AHL

	CALL	GET_DIR_POS
	LD	C,A
	LD	B,0
	ADD	HL,BC

	LD	A,(BANK1_ADR+17)	;BPB_RootEntCnt
	RRCA
	RRCA
	RRCA
	RRCA
	LD	C,A

	LD	A,(BANK1_ADR+13)	;BPB_SecPerClus
	CP	2
	JR	Z,CLUST1
	RLC	C
	DEC	C
	LD	A,(BANK1_ADR+11+1)	;BPB_BytsPerSec High	
	CP	2
	JR	NZ,CLUST1
	DEC	C
	DEC	C
CLUST1:
	DEC	C
	ADD	HL,BC

#if exists USE_NORMAL_32K_ROM
	LD	A,L
#else
	PUSH	HL
	ADD	HL,HL	;*2
	ADD	HL,HL	;*4
	ADD	HL,HL	;*8
	CALL	GET_DISK_BANK_FDRV
	ADD	A,H
	LD	(BANK1_SEL),A			;ASCII-8K/Konami-8K
	LD	(KONAMI_SCC_BANK1_SEL),A	;Konami-8K/Konami-SCC
	LD	(_BANK),A
	POP	HL
	LD	A,01FH			;セグメントのサイズでフィルタする(8K:1F)
	AND	L
#endif
	ADD	A,high BANK1_ADR
	LD	H,A
	LD	L,0
	EX	DE,HL
	POP	BC
	RET

ENDCL:
	LD	A,D	;END CLUSTER
	CP	00FH	;FAT12の最大値
	RET	NZ
	LD	A,E
	CP	0F7H
	RET

RB_READ:
	XOR	A	;HLA = HL*128
	SRL	H
	RR	L
	RRA
	LD	(RR_LOW),A
	LD	(RR_MID),HL
	LD	HL,128

	CALL	ROM_READ
	RET

GETSEQ:
	LD	L,(IY+32)
	LD	H,(IY+12)

	SLA	L

	SRL	H
	RR	L
	RET

SETSEQ:
	PUSH	AF
	LD	A,(RR_LOW)
	LD	HL,(RR_MID)

	CALL	SSQ1

	ADD	HL,HL
	SRL	L
	LD	(IY+32),L
	LD	(IY+12),H
	POP	AF
	RET

GETSIZE:
	LD	A,(IY+16)
	LD	L,(IY+17)
	LD	H,(IY+18)
SSQ1:
	ADD	A,A
	ADC	HL,HL
	OR	A
	RET	Z
	INC	HL
	RET

SET_FCB:
	PUSH	DE
	POP	IY
	LD	A,(IY+28)
	CP	0FFH
	JR	NZ,POPAF_SCF_FF_RET
	PUSH	HL
	LD	L,(IY+26)
	LD	H,(IY+27)
	LD	(_CLPS),HL
	POP	HL
	RET

POPAF_SCF_FF_RET:
	POP	AF
	SCF
	SBC	A,A
	RET

GET_DIR_DAT:
	CALL	GET_DIR_POS
	ADD	A,high BANK1_ADR
	LD	L,0
	LD	H,A			;HL=BANK1_ADR+(BPB_RsvdSecCnt+BPB_FATSz16*BPB_NumFATs)*BPB_BytsPerSec
#if exists USE_NORMAL_32K_ROM
#else
	CALL	CHECK_DIR_PAGE
#endif
	LD	A,(BANK1_ADR+17)	;BPB_RootEntCnt
	LD	C,A
	RET

GET_DIR_POS:
	CALL	GET_DISK_BANK_FDRV
	LD	(BANK1_SEL),A			;ASCII-8K/Konami-8K
	LD	(KONAMI_SCC_BANK1_SEL),A	;Konami-8K/Konami-SCC
	LD	(_BANK),A
	LD	A,(BANK1_ADR+16)	;BPB_NumFATs
	LD	B,A
	LD	A,(BANK1_ADR+22)	;BPB_FATSz16
	LD	C,A
	LD	A,(BANK1_ADR+14)	;BPB_RsvdSecCnt
GET_DIR_POS1:
	ADD	A,C
	DJNZ	GET_DIR_POS1

	LD	BC,(BANK1_ADR+11)	;BPB_BytsPerSec	
L_MDP:
	RR	B	;->CF
	RET	C
	ADD	A,A
	JR	L_MDP

WILDCARD:
	DB	"???????????"
