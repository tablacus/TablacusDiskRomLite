
;	Tablacus DISK ROM - INIT
;

INIT_ROM:
	XOR	A
	LD	HL,0F300H
	LD	B,068H
	CALL	FILL_MEMORY

	LD	A,1
	LD	(DRVTBL),A

	LD	HL,(HIMEM)
	LD	DE,NEW_HIMEM
	AND	A
	SBC	HL,DE
	JR	C,INIT1
	EX	DE,HL
	LD	HL,(STKTOP)
	SBC	HL,DE
	LD	(STKTOP),HL	;起動時の空き容量表示の為
	LD	SP,HL
	LD	HL,(MEMSIZ)
	SBC	HL,DE
	LD	(MEMSIZ),HL
	LD	HL,(FRETOP)
	SBC	HL,DE
	LD	(FRETOP),HL
	LD	HL,NEW_HIMEM
	LD	(HIMEM),HL
INIT1:
	XOR	A
	LD	(_DVSW),A
	DEC	A		;0FFH
	LD	(DEVICE),A

#if exists _RAM64K
	LD	HL,AT_ISC
	LD	DE,ISC
	LD	BC,ISC_E-ISC
	LDIR
#endif
	LD	HL,AT_ISCB
	LD	DE,ISCB
	LD	BC,ISCB_E-ISCB
	LDIR
	LD	HL,(SAVSTK)
	LD	(0F34BH),HL

	LD	A,0C3H		;JP
	LD	(H_GONE),A
	LD	(BDOS),A
	LD	(RAMUSE),A
	LD	(ROMUSE),A
	LD	HL,REPLACE_COMMAND
	LD	(H_GONE+1),HL
	LD	HL,H_BDOS
	LD	(BDOS+1),HL
	LD	HL,RAMUSE1
	LD	(RAMUSE+1),HL
	LD	HL,ROMUSE1
	LD	(ROMUSE+1),HL

	DB	03EH
	RST	30H
	LD	(H_BINS),A
	LD	(H_BINL),A
	LD	(H_FILE),A
	LD	(H_BDOS),A
	LD	(H_PHYD),A

	CALL	GTSL1_
	LD	(ROM_SLT),A
	LD	(ROM_SLT_COPY),A
	LD	(H_BINS+1),A
	LD	(H_BINL+1),A
	LD	(H_FILE+1),A
	LD	(H_BDOS+1),A
	LD	(H_PHYD+1),A
	LD	(DRVTBL+1),A
	LD	(MASTERS),A
	LD	HL,ROM_LOAD
	LD	(H_BINS+2),HL
	LD	HL,ROM_RUN
	LD	(H_BINL+2),HL
	LD	HL,ROM_FILES
	LD	(H_FILE+2),HL
	LD	HL,ROM_BDOS
	LD	(H_BDOS+2),HL
	LD	HL,DISKIO
	LD	(H_PHYD+2),HL

	DB	03EH
	RET
	LD	(H_FILE+4),A
	LD	(H_BINS+4),A
	LD	(H_BINL+4),A
	LD	(H_BDOS+4),A
	LD	(H_PINL+4),A
	LD	(H_PHYD+4),A

	XOR	A
#if exists USE_MORMAL32K_OR_ASCII16
	LD	(ASCII16_BANK0_SEL),A		;似非RAM対策でバンク0を設定
	LD	(ASCII16_BANK1_SEL),A		;ASCII-16K
#else
	LD	(BANK0_SEL),A			;似非RAM対策でバンク0を設定
	LD	(BANK1_SEL),A			;ASCII-8K/Konami-8K
	LD	(KONAMI_SCC_BANK1_SEL),A	;Konami-8K/Konami-SCC
#endif
	LD	A,(BANK1_ADR)
	CP	'A'
#if exists USE_MORMAL32K_OR_ASCII16
	JP	Z,NOT_BANK_TYPE
	LD	A,DISK_BANK
	LD	(ASCII16_BANK1_SEL),A		;ASCII-16K
#else
	JP	NZ,NOT_BANK_TYPE
	LD	A,DISK_BANK
	LD	(BANK1_SEL),A			;ASCII-8K/Konami-8K
	LD	(KONAMI_SCC_BANK1_SEL),A	;Konami-8K/Konami-SCC
#endif
	CALL	RSLREG		;read primary slot #
	RLCA
	RLCA
	PUSH	AF
	LD	D,4+1
	CALL	GTSL2_
	LD	(RAMAD3),A
	POP	AF
	RLCA
	RLCA
	LD	D,2+1
	CALL	GTSL2_
	LD	H,080H
	CALL	CHK_RAM
	LD	(RAMAD2),A
RAMCHK2:
	LD	A,(RAMAD3)
	LD	H,040H
	CALL	CHK_RAM
	LD	(RAMAD1),A
RAMCHK1:
	LD	A,(RAMAD3)
	LD	H,00H
	CALL	CHK_RAM
	LD	(RAMAD0),A
RAMCHK0:
	LD	HL,(BANK1_ADR+19)	;BPB_TotSec16
	LD	BC,0000FH		;切り上げ
	ADD	HL,BC
	LD	A,L

	LD	B,4
B_DRIVE1:
	SRL	H
	RRA
	DJNZ	B_DRIVE1

	ADD	A,DISK_BANK		;A=(TotSec16/16)+DISK_BANK
	LD	(B_DRIVE),A

#if exists FIX_DRIVE
	LD	A,(B_DRIVE)
	CP	FIX_DRIVE
	JR	Z,OK_FIX_DRIVE
	LD	HL,MSG_ERROR_DRIVE
	CALL	MSX
	LD	A,(B_DRIVE)
	CALL	PRTHX
	LD	IX,CHGET
	CALL	CALSLT_R
	LD	HL,MSG_CRLF
	CALL	MSX
OK_FIX_DRIVE:
#endif
	;拡張スロットの選択を設定する
	LD	A,(ROM_SLT)
	LD	D,A
	AND	00CH
	LD	E,A
	LD	A,D
	AND	3
	ADD	A,A
	ADD	A,A
	ADD	A,A
	SCF
	ADC	A,A
	OR	E
	LD	E,A
	LD	D,0
	LD	HL,SLTATR
	ADD	HL,DE
	LD	(HL),060H

	LD	A,1
	CALL	IS_BPB
	SBC	A,A
	AND	2
	XOR	3
	LD	(_LVECTOR),A
	;CTRL+STOPを抑制する
	LD	A,1
	LD	(BASROM),A

	LD	A,(EXTBIO)
	CP	0F7H		;RST 30H
	JR	Z,EXTBIO_OK
	DB	03EH
	RET
	LD	HL,EXTBIO
	LD	B,29
	CALL	FILL_MEMORY
EXTBIO_OK:
	XOR	A
	LD	(REBOOT),A
	LD	HL,(BOTTOM)
	LD	DE,16384
	ADD	HL,DE
	JP	C,BOOT1		;RAM16KB以下の場合はブートセクタを実行しない

;	LD	E,A		;すでにE=0
	LD	D,A
	LD	B,1
	LD	HL,FD_BOOT_START
	CALL	DISKIO

	LD	DE,ROMUSE
	LD	HL,DISKVE
	XOR	A
	CALL	FD_BOOT_EXEC
#if exists _RAM64K
				;64K版の場合はページ0をRAMに切り替えRAM側にインタースロットコールを入れる
	LD	A,(RAMAD0)	;ページ0をRAMに切り替える
	CALL	ENASLT_00H

	XOR	A
	LD	B,A
	LD	H,A
	LD	L,A
	CALL	FILL_MEMORY

	LD	A,0C3H		;JP
				;インタースロットコール
	LD	HL,RDSLT
	LD	(_RDSLT),A
	LD	(_RDSLT+1),HL

	LD	HL,WRSLT
	LD	(_WRSLT),A
	LD	(_WRSLT+1),HL

	LD	HL,CALSLT
	LD	(_CALSLT),A
	LD	(_CALSLT+1),HL

	LD	HL,ENASLT
	LD	(_ENASLT),A
	LD	(_ENASLT+1),HL

	LD	HL,CALLF
	LD	(_CALLF),A
	LD	(_CALLF+1),HL
				;割り込み
	LD	HL,INT38H
	LD	(00038H),A
	LD	(00038H+1),HL
				;インタースロットコールの補助
	LD	HL,AT_3B
	LD	DE,ENASUB
	LD	BC,AT_3B_E-AT_3B
	LDIR

	LD	HL,(_RDSLT+1)
	LD	DE,RDSLT
	XOR	A
	SBC	HL,DE
	LD	DE,ROMUSE
	LD	HL,DISKVE
	SCF
	CALL	Z,FD_BOOT_EXEC
#endif
BOOT1:
	JP	BASENT

NOT_BANK_TYPE:
				;ROMのタイプが違う
	LD	HL,MSG_ERROR_ROM_MODE
	CALL	MSX
	LD	IX,CHGET
	JP	CALSLT_R

GTSL1_:				;自分のいるスロットを知る
	CALL	RSLREG		;read primary slot #
	RRCA
	RRCA
	LD	D,1
GTSL2_:
	AND	3		;[A]=000000PP
	LD	E,A		;[E]=000000PP
	LD	HL,EXPTBL
	ADD	A,L		;桁上りは無い
	LD	L,A		;[HL]=EXPTBL+000000PP
	LD	A,E		;[A]=000000PP
	BIT	7,(HL)
	RET	Z
	LD	A,L		;point to SLTTBL entry
	ADD	A,4		;桁上りは無い
	LD	L,A
	LD	A,(HL)		;get currently expansion slot register
GTSL3_:
	DEC	D
	JR	Z,GTSL4_:
	RRCA
	JR	GTSL3_:
GTSL4_:
	AND	00CH		;[A] = 0000SS00
	OR	E		;[A] = 0000SSPP
	OR	080H		;[A] = 1000SSPP
	RET

CHK_RAM:
	PUSH	HL
	CALL	CHK_RAM0
	POP	HL
	RET	Z
	LD	A,(EXPTBL)		;スロット#0
	AND	080H
	CALL	CHK_RAM_SLT
	RET	Z
	LD	A,(EXPTBL+1)		;スロット#1
	AND	080H
	ADD	A,1
	CALL	CHK_RAM_SLT
	RET	Z
	LD	A,(EXPTBL+2)		;スロット#2
	AND	080H
	ADD	A,2
	CALL	CHK_RAM_SLT
	RET	Z
	LD	A,(EXPTBL+3)		;スロット#3
	AND	080H
	ADD	A,3
CHK_RAM_SLT:
	PUSH	HL
	CALL	CHK_RAM0		;スロット#X or X-0
	POP	HL
	RET	Z
	BIT	7,C
	JR	Z,CHK_RAM_E		;スロットは拡張されていない
	LD	A,C
	OR	4			;スロット#X-1
	PUSH	HL
	CALL	CHK_RAM0
	POP	HL
	RET	Z
	LD	A,C
	OR	00CH			;スロット#X-3
	PUSH	HL
	CALL	CHK_RAM0
	POP	HL
	RET	Z
	LD	A,C
	AND	0F3H			;スロット#X-3
	OR	8
	PUSH	HL
	CALL	CHK_RAM0
	POP	HL
CHK_RAM_E:
	XOR	A
	INC	A			;ZF=0にする
	LD	A,0
	RET

CHK_RAM0:
	LD	C,A
	LD	L,0
CHK_RAM1:
	LD	A,C
	CALL	RDSLTX
	ADD	A,0E5H
	LD	B,A
	LD	E,A
	LD	A,C
	PUSH	BC
	CALL	_WRSLT
	POP	BC
	LD	A,C
	CALL	RDSLTX
	CP	B
	RET	NZ
	SUB	0E5H
	LD	A,C
	LD	E,A
	PUSH	BC
	CALL	_WRSLT
	POP	BC
	INC	H
	LD	A,L
	ADD	A,4
	LD	L,A
	JR	NZ,CHK_RAM1
	LD	A,C		;ZF=1のハズ
	RET

CALSLT_R:
	PUSH	BC
	PUSH	HL
	PUSH	AF
	LD	A,(0000H)
	CP	0F3H		;0000H が DI の場合はページ0を BIOS ROM とみなす
	JR	Z,CALSLT_R2
	POP	AF
	LD	IY,(EXPTBL-1) ;メインROMスロット
	CALL	_CALSLT
	POP	HL
	POP	BC
	RET
CALSLT_R2:
	POP	AF
	CALL	JP_IX
	POP	HL
	POP	BC
	RET

MSX1:
	CALL	MSGA1
MSX:
	LD	A,(HL)
	INC	HL
	OR	A
	JR	NZ,MSX1
	RET

PRTHX:
	PUSH	AF
	RLCA
	RLCA
	RLCA
	RLCA
	CALL	PRTA2
	POP	AF
PRTA2:
	CALL	ASC
	JP	MSG_A

ASC:
	AND	0FH
	ADD	A,'0'
	CP	'9'+1
	RET	C
	ADD	A,7
	RET

MSN:
#if exists USE_MORMAL32K_OR_ASCII16
	CALL	RDSLT_ROM
#else
	LD	A,(HL)
#endif
	INC	HL
	CALL	MSG_A
	DJNZ	MSN
	RET

RDSLT_ROM3:
	LD	A,(HL)
	RET
RDSLT_ROM:
	BIT	7,H
	JR	Z,RDSLT_ROM3
RDSLT_ROM2:
	LD	A,(ROM_SLT)
RDSLTX:
	PUSH	BC
	PUSH	DE
	CALL	_RDSLT
	POP	DE
	POP	BC
	RET

